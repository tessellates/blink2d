#pragma once

#include "CellMeta.hpp"
#include "NoitaConfig.hpp"
#include <array>
#include <algorithm>
#include <iostream>
#include <random>

class CellProcessor 
{
public:
    CellProcessor() = default;
    std::array<SmartCell, NoitaConfig::numCells> simpleCells1;
    std::array<SmartCell, NoitaConfig::numCells> simpleCells2;
    std::array<int, NoitaConfig::numCells> renderData;
    bool state1 = true;

    void update();
    int parseWalk(int walk);

    void testSpawn(int n = NoitaConfig::numCells/3)
    {
        simpleCells1.fill({0, 0});
        simpleCells2.fill({0, 0});
        for (int i = 0; i < n; ++i)
        {
            simpleCells1[i] = {45, 1};
        }
    }

    void randomTestSpawn()
    {
        int n = NoitaConfig::numCells/2;
        testSpawn(n);
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> dis2(0, NoitaConfig::numCells-1);
        // Shuffle the array using Fisher-Yates algorithm
        for (size_t i = NoitaConfig::numCells - 1; i > 0; --i) {
            std::uniform_int_distribution<> dis(0, i);
            size_t j = dis(gen);
            std::swap(simpleCells1[i], simpleCells1[j]);
        }
    }

    std::array<SmartCell, NoitaConfig::numCells>& freshCells()
    {
        return state1 ? simpleCells1 : simpleCells2;
    }
};

inline void updateCells(CellProcessor& cellp)
{
    return;
    auto& cells = cellp.freshCells();
    for (int i = 0; i < NoitaConfig::numCells; ++i)
    {
        if (cells[i].type == 1)
        {
            if (i < (NoitaConfig::height-1)*NoitaConfig::width)
                cells[i].walk = 5;
        }
    }
}